//! Hitori is a generic regular expressions library. It works by creating series of
//! if-statements for each expression at compile-time. Capturing is done through the traits.
//!
//! # Example
//!
//! ```
//! struct Let {
//!     max: u32,
//! }
//!
//! #[hitori::impl_expr(and_expr_mut)]
//! #[hitori::and_define(capture_mut, capture_ranges)]
//! impl<C: LetCaptureMut<Idx>, Idx: Clone> Expr<C, Idx, char> for Let {
//!     const PATTERN: _ = (
//!         |ch| ch == 'l',
//!         |ch| ch == 'e',
//!         |ch| ch == 't',
//!         char::is_whitespace,
//!         #[hitori::capture(var)]
//!         (char::is_alphabetic),
//!         char::is_whitespace,
//!         |ch| ch == '=',
//!         char::is_whitespace,
//!         #[hitori::capture(val)]
//!         (
//!             |ch: char| ch.to_digit(10).map(|d| d < self.max).unwrap_or_default(),
//!             |ch| ch == '.' || ch == ',',
//!             |ch: char| ch.is_digit(10),
//!         ),
//!         |ch| ch == ';'
//!     );
//! }
//!
//! let text = "... let x = 5.1; ...";
//!
//! let mut capture = LetCaptureRanges::default();
//! let found = hitori::string::find(Let { max: 6 }, &mut capture, text)
//!     .unwrap()
//!     .unwrap();
//! assert_eq!(&text[found], "let x = 5.1;");
//! assert_eq!(&text[capture.var.unwrap()], "x");
//! assert_eq!(&text[capture.val.unwrap()], "5.1");
//!
//! let not_found = hitori::string::find_no_capture(Let { max: 4 }, text);
//! assert_eq!(not_found, None);
//! ```
//!  
//! *See more code samples along with traits, impls and structs they expand to in [`examples`].*
//!
//! # Crate features
//!
//! - **`box`** *(enabled by default)* – blanket implementations of `hitori` traits
//!   for boxes using alloc crate.
//! - **`macros`** *(enabled by default)* – `impl_expr_mut` and `impl_expr` macros.
//! - **`find-hitori`** – finds hitori package to be used in macros
//!   even if it has been renamed in Cargo.toml. **`macros`** feature is required.

#![no_std]
#![cfg_attr(
    doc,
    feature(doc_cfg),
    allow(mixed_script_confusables, confusable_idents)
)]

#[cfg(all(feature = "find-hitori", not(feature = "hitori-macros")))]
core::compile_error!(
    r#""find-hitori" feature doesn't do anything unless "macros" feature is enabled"#
);

#[cfg(feature = "box")]
extern crate alloc;

#[cfg(all(doc, feature = "box", feature = "macros", not(feature = "find_hitori")))]
#[cfg_attr(doc, doc(cfg(doc)))]
pub mod examples;
pub mod string;

mod capture;
mod expr;
mod generic;

pub use generic::{find, find_no_capture, matches, matches_no_capture};

/// Implements `Expr` and optionally `ExprMut` for the struct.
///
/// *See [`examples`] for code samples along with the traits, impls and structs they expand to.*
///
/// # Arguments
///
/// - **`and_mut`** – adds an `ExprMut` impl
///
/// # Additional definitions
///
/// An additional attribute `and_define` can be placed along with [`impl_expr`].
/// It accepts arguments:
///
/// - **`capture_mut`** – defines a subtrait of [`CaptureMut`] with methods
///   corresponding to identifiers passed to `hitori::capture` attributes.
///   Unless **`with_prefix`** is used, the subtrait is named by prefixing
///   expression struct's name to *CaptureMut*.
/// - **`capture`** – defines a subtrait of [`Capture`] and the trait generated
///   by **`capture_mut`** with methods corresponding to identifiers passed to
///   `hitori::capture` attributes. Unless **`with_prefix`** is used,
///   the subtrait is named by prefixing expression struct's name to *Capture*.
/// - **`capture_ranges`** – defines a struct with fields of type `Option<Range<Idx>>`
///   that implements the trait generated by **`capture_mut`** by storing captured ranges.
///   Unless **`with_prefix`** is used, the subtrait is named by prefixing
///   expression struct's name to *CaptureRanges*
/// - **`with_prefix`** – sets prefix for all the generated items
/// - **`with_vis`** – sets visibility for all the generated items
#[cfg(feature = "macros")]
#[cfg_attr(doc, doc(cfg(feature = "macros")))]
pub use hitori_macros::impl_expr;

/// Implements `ExprMut` for the struct.
///
/// *See [`examples`] for code samples along with the traits, impls and structs they expand to.*
///
/// # Arguments
///
/// None
///
/// # Additional definitions
///
/// Same as [`impl_expr`]
#[cfg(feature = "macros")]
#[cfg_attr(doc, doc(cfg(feature = "macros")))]
pub use hitori_macros::impl_expr_mut;

pub use capture::{Capture, CaptureMut};
pub use expr::{Expr, ExprMut};
