//! Capturing is done by annotating an all-pattern or an any-pattern with
//! `#[hitori::capture]`.
//!
//! Captured index ranges are returned
//! as fields of [`ExprMut::Capture`] struct that is generated by the macro.
//!
//! The name of the struct is a concatenation of implementor's name and
//! `Capture` by default.
//!
//! ```
#![doc = include_example!("capturing/fraction")]
//!
//! let s = "4/5";
//! let matched = hitori::string::starts_with(Fraction, s).unwrap();
//! assert_eq!(&s[matched.capture.numerator.unwrap()], "4");
//! assert_eq!(&s[matched.capture.denominator.unwrap()], "5");
//!
//! assert!(hitori::string::starts_with(Fraction, "1/0").is_none());
//! ```
//! *equivalent to `(?P<numerator>\d)/(?P<denominator>[1-9])` in [regex] syntax*
//!
//! ### Reused capture names
//!
//! Unlike in [regex], non-unique capture names are allowed. The last capture into
//! the same destination is the one that is returned in [`ExprMut::Capture`] struct.
//!
//! ```
#![doc = include_example!("capturing/shopping_list")]
//!
//! let s = "🍄🧀";
//! let matched = hitori::string::starts_with(ShoppingList, s).unwrap();
//! assert_eq!(&s[matched.capture.last_item.unwrap()], "🧀");
//! ```
//! *equivalent to `(?P<last_item>🍄)?(?P<last_item>🫑)?(?P<last_item>🧀)?(?P<last_item>🥚)?`
//! in [regex] syntax*
//!
//! ### Multiple destinations
//!
//! An expression can be captured into multiple destinations using
//! `#[hitori::capture(dest1, dest2, dest3)]` syntax.
//!
//! ```
#![doc = include_example!("capturing/rectangle")]
//!
//! let s = "◾ 9";
//! let matched = hitori::string::starts_with(Rectangle, s).unwrap();
//! assert_eq!(&s[matched.capture.width.unwrap()], "9");
//! assert_eq!(&s[matched.capture.height.unwrap()], "9");
//!
//! let s = "▬ 5 6";
//! let matched = hitori::string::starts_with(Rectangle, s).unwrap();
//! assert_eq!(&s[matched.capture.width.unwrap()], "5");
//! assert_eq!(&s[matched.capture.height.unwrap()], "6");
//! ```
//! *equivalent to `◾ (?P<width>(?P<height>\d))|▬ (?P<width>\d) (?P<height>\d)`
//! in [regex] syntax*
//!
//! [`ExprMut::Capture`]: crate::ExprMut::Capture
//! [regex]: https://docs.rs/regex

mod fraction;
mod rectangle;
mod shopping_list;

pub use fraction::{Fraction, FractionCapture};
pub use rectangle::{Rectangle, RectangleCapture};
pub use shopping_list::{ShoppingList, ShoppingListCapture};

use super::include_example;
